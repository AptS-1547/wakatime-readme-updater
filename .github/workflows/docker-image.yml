name: Docker Image CI

on:
  push:
    tags:
      # 匹配所有 v 开头的标签，但在 job 中会过滤只处理完整版本号
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  REGISTRY_IMAGE_DOCKERHUB: e1saps/wakatime-readme-updater
  REGISTRY_IMAGE_GHCR: ghcr.io/apts-1547/wakatime-readme-updater

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v3
    #   with:
    #     platforms: arm64,386
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY_IMAGE_DOCKERHUB }}
          ${{ env.REGISTRY_IMAGE_GHCR }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable=${{ !contains(github.ref, '-') && startsWith(github.ref, 'refs/tags/v') }}
          type=raw,value=test,enable=${{ github.ref_type != 'tag' }}
        labels: |
          org.opencontainers.image.title=wakatime-readme-updater
          org.opencontainers.image.description=A tool to update your GitHub README with WakaTime stats.
          org.opencontainers.image.vendor=AptS-1547
        
    - name: Build and push Docker images
      uses: docker/build-push-action@v6
      with:
        context: .
        # platforms: linux/amd64,linux/arm64,linux/386
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 启用多层缓存策略
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:buildcache
          type=registry,ref=${{ env.REGISTRY_IMAGE_GHCR }}:buildcache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY_IMAGE_DOCKERHUB }}:buildcache,mode=max
        build-args: |
          VERSION=${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
        # 启用构建记录和证明
        provenance: true
        sbom: true

    # 可选：构建总结和通知
    - name: Build Summary
      if: always()
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "- **Images**:" >> $GITHUB_STEP_SUMMARY
        echo "  - Docker Hub: ${{ env.REGISTRY_IMAGE_DOCKERHUB }}" >> $GITHUB_STEP_SUMMARY
        echo "  - GitHub CR: ${{ env.REGISTRY_IMAGE_GHCR }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

    # 自动创建/移动主版本 Git tags (v1, v1.2)
    # 只在推送完整语义化版本标签时执行 (v1.2.3)
    # 推送时使用 [skip ci] 避免触发新的 workflow 运行
    - name: Update major version tags
      if: github.ref_type == 'tag' && !contains(github.ref, '-')
      run: |
        # 提取版本号
        TAG=${GITHUB_REF#refs/tags/}
        echo "Processing tag: $TAG"

        # 检查是否为完整的语义化版本 (v1.2.3)
        if [[ $TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"

          # 配置 git
          git config user.name "AptS-1738"
          git config user.email "apts-1738@esaps.net"

          # 创建/移动 v1 tag（使用 [skip ci] 避免触发新的 workflow）
          git tag -fa "v${MAJOR}" -m "chore: update v${MAJOR} to ${TAG} [skip ci]"
          git push origin "v${MAJOR}" --force
          echo "✅ Updated v${MAJOR} tag"

          # 创建/移动 v1.2 tag（使用 [skip ci] 避免触发新的 workflow）
          git tag -fa "v${MAJOR}.${MINOR}" -m "chore: update v${MAJOR}.${MINOR} to ${TAG} [skip ci]"
          git push origin "v${MAJOR}.${MINOR}" --force
          echo "✅ Updated v${MAJOR}.${MINOR} tag"

          echo "## Git Tags Updated" >> $GITHUB_STEP_SUMMARY
          echo "- **Full version**: $TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Major version**: v${MAJOR}" >> $GITHUB_STEP_SUMMARY
          echo "- **Minor version**: v${MAJOR}.${MINOR}" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ Tag $TAG is not a full semver (vX.Y.Z), skipping major version tag update"
        fi
